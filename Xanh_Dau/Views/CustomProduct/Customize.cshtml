@model Xanh_Dau.DTO.CustomizeProductViewModel
@{
ViewData["Title"] = "Tùy chỉnh Charm của bạn";
Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/site.css"/>
<link rel="stylesheet" href="~/tailwind/build/tailwind.css">
<link rel="stylesheet" href="~/fonts/boxicons.css"/>
<script src="~/js/site.js"></script>

<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8 text-center">
        <h1 class="text-3xl font-bold text-pink-600">Tùy chỉnh Charm của bạn</h1>
        <p class="text-gray-600 mt-2">
            Kích thước Charm: 10mm x 8mm (Tỷ lệ 5:3)
        </p>
    </div>

    <div class="flex flex-wrap lg:flex-nowrap gap-8">
        <!-- Preview Area -->
        <div class="w-full lg:w-2/3">
            <div class="bg-white p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-bold mb-4">Xem trước thiết kế</h2>

                <div class="relative bg-gray-100 rounded-lg border-2 border-gray-200 overflow-hidden"
                     style="width: 500px; height: 300px;">
                    <img src="@Model.BaseProduct.ProductImages.First().ImageUrl"
                         class="absolute top-0 left-0 w-full h-full object-contain pointer-events-none"
                         id="baseProduct" />
                    <canvas id="designCanvas"></canvas>
                </div>

                <div class="mt-4">
                    <h3 class="font-semibold">@Model.BaseProduct.Name</h3>
                    <p class="text-gray-600">@Model.BaseProduct.Description</p>
                </div>
            </div>
        </div>

        <!-- Controls -->
        <div class="w-full lg:w-1/3">
            <div class="bg-white p-6 rounded-lg shadow-lg">
                <!-- Image Upload -->
                <div class="mb-6">
                    <h3 class="text-lg font-semibold mb-2">Tải lên hình ảnh</h3>
                    <input type="file"
                           id="imageUpload"
                           accept="image/*"
                           class="hidden"
                           onchange="handleImageUpload(this)">
                    <label for="imageUpload"
                           class="block w-full px-4 py-3 bg-pink-500 text-white rounded-lg cursor-pointer 
                                  text-center hover:bg-pink-400 transition duration-200">
                        Chọn hình ảnh
                    </label>
                    <p class="text-sm text-gray-500 mt-2">
                        Chọn hình ảnh bạn muốn in lên charm
                    </p>
                </div>

                <!-- Image Controls -->
                <div id="imageControls" class="mb-6 hidden">
                    <h3 class="text-lg font-semibold mb-2">Điều chỉnh hình ảnh</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-1">Kích thước</label>
                            <input type="range"
                                   min="0.1" max="2" step="0.1" value="1"
                                   id="scaleControl"
                                   class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                            <div class="flex justify-between text-xs text-gray-600">
                                <span>Nhỏ</span>
                                <span>Lớn</span>
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-1">Xoay</label>
                            <input type="range"
                                   min="0" max="360" value="0"
                                   id="rotationControl"
                                   class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                            <div class="flex justify-between text-xs text-gray-600">
                                <span>0°</span>
                                <span>360°</span>
                            </div>
                        </div>

                        <button onclick="deleteImage()"
                                class="w-full px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 
                                       transition duration-200">
                            <i class="bx bx-trash mr-2"></i>
                            Xóa hình ảnh
                        </button>
                    </div>
                </div>

                <!-- Price Section -->
                <div class="mb-6">
                    <div class="p-4 bg-gray-50 rounded-lg">
                        <div class="flex justify-between items-center text-lg font-bold">
                            <span>Giá:</span>
                            <span class="text-pink-500">
                                @Model.BaseProduct.CustomBasePrice?.ToString("N0")₫
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="space-y-3">
                    <button onclick="saveDesign()"
                            class="w-full px-4 py-3 bg-pink-500 text-white rounded-lg font-semibold 
                                   hover:bg-pink-400 transition duration-200">
                        <i class="bx bx-cart-add mr-2"></i>
                        Thêm vào giỏ hàng
                    </button>

                    <a href="@Url.Action("Index", "Home")"
                       class="block w-full px-4 py-3 text-center text-gray-700 rounded-lg font-semibold 
                              border border-gray-300 hover:bg-gray-50 transition duration-200">
                        <i class="bx bx-arrow-back mr-2"></i>
                        Quay lại
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Notifications -->
<div id="notification"
     class="fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg hidden transform transition-transform duration-300">
</div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
    <script>
        let canvas;
        let currentImage;
        
        // Initialize canvas
        document.addEventListener('DOMContentLoaded', function() {
            canvas = new fabric.Canvas('designCanvas', {
                width: 500,
                height: 300,
                backgroundColor: 'transparent'
            });

            // Set up canvas event listeners
            canvas.on('object:selected', function(e) {
                document.getElementById('imageControls').classList.remove('hidden');
                currentImage = e.target;
                updateControls();
            });

            canvas.on('selection:cleared', function() {
                document.getElementById('imageControls').classList.add('hidden');
                currentImage = null;
            });

            // Make canvas responsive
            window.addEventListener('resize', resizeCanvas);
            resizeCanvas();
        });

        function resizeCanvas() {
            const container = document.getElementById('designCanvas').parentElement;
            const ratio = canvas.width / canvas.height;
            const containerWidth = container.offsetWidth;
            const containerHeight = containerWidth / ratio;

            canvas.setDimensions({
                width: containerWidth,
                height: containerHeight
            });
            canvas.renderAll();
        }

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg transform transition-transform duration-300 ${
                type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
            }`;
            notification.classList.remove('hidden');
            
            setTimeout(() => {
                notification.classList.add('hidden');
            }, 3000);
        }

        function handleImageUpload(input) {
            if (!input.files || !input.files[0]) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                const img = new Image();
                img.onload = function() {
                    // Tính toán scale để ảnh vừa với canvas và hiển thị đầy đủ
                    const scaleX = canvas.width / img.width;
                    const scaleY = canvas.height / img.height;
                    // Lấy scale nhỏ nhất để ảnh vừa với canvas
                    const scale = Math.min(scaleX, scaleY);

                    if (currentImage) {
                        canvas.remove(currentImage);
                    }

                    const fabricImage = new fabric.Image(img, {
                        left: 0,
                        top: 0,
                        width: img.width,
                        height: img.height,
                        scaleX: scale,
                        scaleY: scale,
                        cornerSize: 10,
                        transparentCorners: false,
                        centeredScaling: true,
                        originX: 'center',
                        originY: 'center'
                    });

                    // Căn giữa ảnh trong canvas
                    fabricImage.centerH();
                    fabricImage.centerV();

                    // Thêm controls zoom
                    canvas.on('mouse:wheel', function(opt) {
                        var delta = opt.e.deltaY;
                        var zoom = canvas.getZoom();
                        zoom *= 0.999 ** delta;
                        if (zoom > 20) zoom = 20;
                        if (zoom < 0.01) zoom = 0.01;
                        canvas.zoomToPoint({ x: opt.e.offsetX, y: opt.e.offsetY }, zoom);
                        opt.e.preventDefault();
                        opt.e.stopPropagation();
                    });

                    // Thêm tính năng pan (di chuyển canvas khi kéo)
                    canvas.on('mouse:down', function(opt) {
                        var evt = opt.e;
                        if (evt.altKey === true) {
                            this.isDragging = true;
                            this.selection = false;
                            this.lastPosX = evt.clientX;
                            this.lastPosY = evt.clientY;
                        }
                    });

                    canvas.on('mouse:move', function(opt) {
                        if (this.isDragging) {
                            var e = opt.e;
                            var vpt = this.viewportTransform;
                            vpt[4] += e.clientX - this.lastPosX;
                            vpt[5] += e.clientY - this.lastPosY;
                            this.requestRenderAll();
                            this.lastPosX = e.clientX;
                            this.lastPosY = e.clientY;
                        }
                    });

                    canvas.on('mouse:up', function(opt) {
                        this.isDragging = false;
                        this.selection = true;
                    });

                    canvas.add(fabricImage);
                    canvas.setActiveObject(fabricImage);
                    currentImage = fabricImage;

                    document.getElementById('imageControls').classList.remove('hidden');
                    updateControls();
                    showNotification('Hình ảnh đã được tải lên thành công. Giữ Alt để di chuyển canvas, cuộn chuột để zoom');

                    // Reset zoom và pan về mặc định
                    canvas.setViewportTransform([1,0,0,1,0,0]);
                    canvas.renderAll();
                }
                img.src = e.target.result;
            }
            reader.readAsDataURL(input.files[0]);
        }

        function updateControls() {
            if (currentImage) {
                document.getElementById('scaleControl').value = currentImage.scaleX;
                document.getElementById('rotationControl').value = currentImage.angle || 0;
            }
        }

        // Scale control
        document.getElementById('scaleControl').addEventListener('input', function(e) {
            if (currentImage) {
                const scale = parseFloat(e.target.value);
                currentImage.scale(scale);
                canvas.renderAll();
            }
        });

        // Rotation control
        document.getElementById('rotationControl').addEventListener('input', function(e) {
            if (currentImage) {
                const rotation = parseFloat(e.target.value);
                currentImage.rotate(rotation);
                canvas.renderAll();
            }
        });

        function deleteImage() {
            if (currentImage) {
                canvas.remove(currentImage);
                currentImage = null;
                document.getElementById('imageControls').classList.add('hidden');
                showNotification('Đã xóa hình ảnh');
            }
        }

        async function saveDesign() {
            if (!currentImage) {
                showNotification('Vui lòng thêm hình ảnh trước khi lưu', 'error');
                return;
            }

            try {
                // Lấy vùng hiển thị hiện tại của canvas
                const currentView = canvas.viewportTransform;
                const zoom = canvas.getZoom();

                // Tạo canvas tạm thời với kích thước đúng của vùng hiển thị
                const tempCanvas = document.createElement('canvas');
                const ctx = tempCanvas.getContext('2d');

                // Đặt kích thước canvas tạm thời bằng với kích thước khung canvas gốc
                tempCanvas.width = canvas.width;
                tempCanvas.height = canvas.height;

                // Vẽ background (nếu cần)
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);

                // Lưu trạng thái và transform của canvas gốc
                const originalViewport = [...canvas.viewportTransform];

                // Reset viewport về mặc định để chụp đúng vùng hiển thị
                canvas.setViewportTransform([1, 0, 0, 1, 0, 0]);

                // Vẽ chính xác những gì đang hiển thị trong canvas
                ctx.drawImage(
                    canvas.getElement(),
                    0, 0,
                    canvas.width,
                    canvas.height
                );

                // Lấy hình ảnh đã được custom
                const customizedImage = tempCanvas.toDataURL({
                    format: 'png',
                    quality: 1
                });

                // Khôi phục viewport gốc
                canvas.setViewportTransform(originalViewport);

                // Lưu thông tin transform để tái hiện chính xác
                const imageData = {
                    base64Image: customizedImage,
                    zoom: zoom,
                    viewportTransform: currentView,
                    width: canvas.width,
                    height: canvas.height
                };

                const response = await fetch('/CustomProduct/SaveCustomProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        baseProductId: @Model.BaseProduct.ProductId,
                        previewImage: customizedImage,
                        images: [imageData]
                    })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('Đã thêm vào giỏ hàng thành công');
                  
                } else {
                    showNotification('Lỗi: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Đã có lỗi xảy ra, vui lòng thử lại', 'error');
            }
}
        
    </script>
}